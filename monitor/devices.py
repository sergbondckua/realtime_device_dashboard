import logging
import subprocess
import threading
import time
import concurrent.futures

from config import DEVICES_IP_MAP

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É. –ü–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∏–π —É –Ω–∞—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
status = {}


def ping_device_robust(ip: str, retries: int = 3, timeout: int = 1) -> bool:
    """
    –ù–∞–¥—ñ–π–Ω–æ –ø—ñ–Ω–≥—É—î –ø—Ä–∏—Å—Ç—Ä—ñ–π, —Ä–æ–±–ª—è—á–∏ –∫—ñ–ª—å–∫–∞ —Å–ø—Ä–æ–±.
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–Ω–∞ —Å–ø—Ä–æ–±–∞ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ—é.
    """
    for i in range(retries):
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 3 –ø–∞–∫–µ—Ç–∏ –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ, –∞–ª–µ —á–µ–∫–∞—î–º–æ –Ω–µ –±—ñ–ª—å—à–µ `timeout` —Å–µ–∫—É–Ω–¥
            # –¥–ª—è –≤—Å—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.
            # –û–ø—Ü—ñ—è -n (—á–∏—Å–µ–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥) –∑–∞–ø–æ–±—ñ–≥–∞—î DNS-–∑–∞–ø–∏—Ç–∞–º.
            result = subprocess.run(
                ["ping", "-c", "1", "-W", str(timeout), "-n", ip],
                capture_output=True,  # –ó–∞—Ö–æ–ø–ª—é—î–º–æ –≤–∏–≤—ñ–¥ –∑–∞–º—ñ—Å—Ç—å DEVNULL
                text=True,
                check=False,  # –ù–µ –≤–∏–∫–∏–¥–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –Ω–µ–Ω—É–ª—å–æ–≤–æ–º—É –∫–æ–¥—ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            )
            if result.returncode == 0:
                return True  # –£—Å–ø—ñ—Ö –∑ –ø–µ—Ä—à–æ—ó –∂ –≤–¥–∞–ª–æ—ó —Å–ø—Ä–æ–±–∏
            # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏, —â–æ–± –Ω–µ "—Å–ø–∞–º–∏—Ç–∏" –º–µ—Ä–µ–∂—É
            if i < retries - 1:
                time.sleep(0.5)
        except (subprocess.SubprocessError, FileNotFoundError):
            # –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Ü–µ—Å—É ping (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–Ω –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π)
            return False
    # –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –±—É–ª–∏ –Ω–µ–≤–¥–∞–ª—ñ
    return False


def monitor_devices(interval: int = 10):
    """
    –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –ø—Ä–∏—Å—Ç—Ä–æ—ó –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ ThreadPoolExecutor.
    """
    devices = DEVICES_IP_MAP

    while True:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–ª –ø–æ—Ç–æ–∫—ñ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
        with concurrent.futures.ThreadPoolExecutor(
            max_workers=len(devices)
        ) as executor:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ {future: device} –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
            future_to_device = {
                executor.submit(ping_device_robust, device["ip"]): device
                for device in devices
            }

            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ –º—ñ—Ä—ñ —ó—Ö –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è
            for future in concurrent.futures.as_completed(future_to_device):
                device = future_to_device[future]
                ip = device["ip"]
                name = device["name"]

                try:
                    is_alive = future.result()
                except Exception as e:
                    logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è: %s", str(e))
                    is_alive = False

                # –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
                status[ip] = {
                    "ip": ip,
                    "name": name,
                    "alive": is_alive,  # –ó–∞–ª–∏—à–∞—î–º–æ –æ–¥–∏–Ω –∫–ª—é—á –∑–∞–º—ñ—Å—Ç—å –¥–≤–æ—Ö (alive, offline)
                    "status": "üü¢ ONLINE" if is_alive else "üî¥ OFFLINE",
                    "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                }

        # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
        # print("\n--- –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ ---")
        # for ip, data in status.items():
        #     print(f"{data['name']:<20} {data['ip']:<15} {data['status']}")
        # print("----------------------------------\n")

        time.sleep(interval)


def start_monitoring():
    """–ó–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ."""
    thread = threading.Thread(target=monitor_devices, args=(10,), daemon=True)
    thread.start()
    logger.info("üöÄ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ...")


# --- –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ---
if __name__ == "__main__":
    start_monitoring()

    # –ì–æ–ª–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫ –º–æ–∂–µ —Ä–æ–±–∏—Ç–∏ —â–æ—Å—å —ñ–Ω—à–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ —á–µ–∫–∞—Ç–∏
    try:
        while True:
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è, —â–æ –≥–æ–ª–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫ –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
            time.sleep(1)
            # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –≤–∏–≤–æ–¥—É —Å—Ç–∞—Ç—É—Å—É —Ç—É—Ç, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            # current_status = status.copy() # –ö–æ–ø—ñ—é—î–º–æ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
            # print(current_status)
    except KeyboardInterrupt:
        print("\nüõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ.")
